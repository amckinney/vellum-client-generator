// This file was auto-generated by Fern from our API Definition.

package documents

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	url "net/url"

	vellumclientgo "github.com/vellum-ai/vellum-client-go"
	core "github.com/vellum-ai/vellum-client-go/core"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

// Used to list documents. Optionally filter on supported fields.
func (c *Client) List(ctx context.Context, request *vellumclientgo.DocumentsListRequest) (*vellumclientgo.PaginatedSlimDocumentList, error) {
	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v1/documents"

	queryParams := make(url.Values)
	if request.DocumentIndexId != nil {
		queryParams.Add("document_index_id", fmt.Sprintf("%v", *request.DocumentIndexId))
	}
	if request.Limit != nil {
		queryParams.Add("limit", fmt.Sprintf("%v", *request.Limit))
	}
	if request.Offset != nil {
		queryParams.Add("offset", fmt.Sprintf("%v", *request.Offset))
	}
	if request.Ordering != nil {
		queryParams.Add("ordering", fmt.Sprintf("%v", *request.Ordering))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *vellumclientgo.PaginatedSlimDocumentList
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Update a Document, keying off of its Vellum-generated ID. Particularly useful for updating its metadata.
//
// A UUID string identifying this document.
func (c *Client) PartialUpdate(ctx context.Context, id string, request *vellumclientgo.PatchedDocumentUpdateRequest) (*vellumclientgo.DocumentRead, error) {
	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/documents/%v", id)

	var response *vellumclientgo.DocumentRead
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPatch,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// A UUID string identifying this document.
func (c *Client) Destroy(ctx context.Context, id string) error {
	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/documents/%v", id)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

// Upload a document to be indexed and used for search.
// **Note:** Uses a base url of `https://documents.vellum.ai`.
func (c *Client) Upload(ctx context.Context, contents io.Reader, request *vellumclientgo.UploadDocumentBodyRequest) (*vellumclientgo.UploadDocumentResponse, error) {
	baseURL := "https://documents.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v1/upload-document"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(vellumclientgo.BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 404:
			value := new(vellumclientgo.NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 500:
			value := new(vellumclientgo.InternalServerError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vellumclientgo.UploadDocumentResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	contentsFilename := "contents_filename"
	if named, ok := contents.(interface{ Name() string }); ok {
		contentsFilename = named.Name()
	}
	contentsPart, err := writer.CreateFormFile("contents", contentsFilename)
	if err != nil {
		return nil, err
	}
	if _, err := io.Copy(contentsPart, contents); err != nil {
		return nil, err
	}
	// TODO: Manually edited; test that this works.
	//
	// We should also verify whether or not complex objects
	// are supported here. If so, we'll probably need to
	// independently serialize them as JSON before writing
	// the field.
	for _, value := range request.AddToIndexNames {
		if err := writer.WriteField("add_to_index_names", fmt.Sprintf("%v", value)); err != nil {
			return nil, err
		}
	}
	if request.ExternalId != nil {
		if err := writer.WriteField("external_id", fmt.Sprintf("%v", *request.ExternalId)); err != nil {
			return nil, err
		}
	}
	if err := writer.WriteField("label", fmt.Sprintf("%v", request.Label)); err != nil {
		return nil, err
	}
	// TODO: Manually edited; test that this works.
	for _, value := range request.Keywords {
		if err := writer.WriteField("keywords", fmt.Sprintf("%v", value)); err != nil {
			return nil, err
		}
	}
	if request.Metadata != nil {
		if err := writer.WriteField("metadata", fmt.Sprintf("%v", *request.Metadata)); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	c.header.Set("Content-Type", writer.FormDataContentType())

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		requestBuffer,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}
