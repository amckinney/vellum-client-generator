// This file was auto-generated by Fern from our API Definition.

package modelversions

import (
	context "context"
	fmt "fmt"
	vellumclientgo "github.com/vellum-ai/vellum-client-go"
	core "github.com/vellum-ai/vellum-client-go/core"
	http "net/http"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

// Used to retrieve a model version given its ID.
//
// A UUID string identifying this model version.
func (c *Client) Retrieve(ctx context.Context, id string) (*vellumclientgo.ModelVersionRead, error) {
	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/model-versions/%v", id)

	var response *vellumclientgo.ModelVersionRead
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Compiles the prompt backing the model version using the provided input values.
//
// A UUID string identifying this model version.
func (c *Client) ModelVersionCompilePrompt(ctx context.Context, id string, request *vellumclientgo.ModelVersionCompilePromptRequestRequest) (*vellumclientgo.ModelVersionCompilePromptResponse, error) {
	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/model-versions/%v/compile-prompt", id)

	var response *vellumclientgo.ModelVersionCompilePromptResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return nil, err
	}
	return response, nil
}
