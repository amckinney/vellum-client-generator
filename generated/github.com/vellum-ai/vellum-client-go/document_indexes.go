// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
	time "time"
)

type DocumentIndexCreateRequest struct {
	// A human-readable label for the document index
	Label string `json:"label"`
	// A name that uniquely identifies this index within its workspace
	Name string `json:"name"`
	// The current status of the document index
	// * `ACTIVE` - Active
	// * `ARCHIVED` - Archived
	Status *DocumentIndexStatus `json:"status,omitempty"`
	// The environment this document index is used in
	// * `DEVELOPMENT` - Development
	// * `STAGING` - Staging
	// * `PRODUCTION` - Production
	Environment *EnvironmentEnum `json:"environment,omitempty"`
	// Configuration representing how documents should be indexed
	IndexingConfig map[string]interface{} `json:"indexing_config,omitempty"`
	// Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index
	CopyDocumentsFromIndexId *string `json:"copy_documents_from_index_id,omitempty"`
}

type DocumentIndexRead struct {
	Id      string    `json:"id"`
	Created time.Time `json:"created"`
	// A human-readable label for the document index
	Label string `json:"label"`
	// A name that uniquely identifies this index within its workspace
	Name string `json:"name"`
	// The current status of the document index
	// * `ACTIVE` - Active
	// * `ARCHIVED` - Archived
	Status *DocumentIndexStatus `json:"status,omitempty"`
	// The environment this document index is used in
	// * `DEVELOPMENT` - Development
	// * `STAGING` - Staging
	// * `PRODUCTION` - Production
	Environment *EnvironmentEnum `json:"environment,omitempty"`
	// Configuration representing how documents should be indexed
	IndexingConfig map[string]interface{} `json:"indexing_config,omitempty"`
}

// * `ACTIVE` - Active
// * `ARCHIVED` - Archived
type DocumentIndexStatus string

const (
	DocumentIndexStatusActive   DocumentIndexStatus = "ACTIVE"
	DocumentIndexStatusArchived DocumentIndexStatus = "ARCHIVED"
)

func NewDocumentIndexStatusFromString(s string) (DocumentIndexStatus, error) {
	switch s {
	case "ACTIVE":
		return DocumentIndexStatusActive, nil
	case "ARCHIVED":
		return DocumentIndexStatusArchived, nil
	}
	var t DocumentIndexStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DocumentIndexStatus) Ptr() *DocumentIndexStatus {
	return &d
}

// * `DEVELOPMENT` - Development
// * `STAGING` - Staging
// * `PRODUCTION` - Production
type EnvironmentEnum string

const (
	EnvironmentEnumDevelopment EnvironmentEnum = "DEVELOPMENT"
	EnvironmentEnumStaging     EnvironmentEnum = "STAGING"
	EnvironmentEnumProduction  EnvironmentEnum = "PRODUCTION"
)

func NewEnvironmentEnumFromString(s string) (EnvironmentEnum, error) {
	switch s {
	case "DEVELOPMENT":
		return EnvironmentEnumDevelopment, nil
	case "STAGING":
		return EnvironmentEnumStaging, nil
	case "PRODUCTION":
		return EnvironmentEnumProduction, nil
	}
	var t EnvironmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnvironmentEnum) Ptr() *EnvironmentEnum {
	return &e
}
